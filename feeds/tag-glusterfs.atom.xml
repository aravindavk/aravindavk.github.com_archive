<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Aravinda VK - glusterfs</title><link href="https://aravindavk.in/" rel="alternate"></link><link href="https://aravindavk.in/feeds/tag-glusterfs.atom.xml" rel="self"></link><id>https://aravindavk.in/</id><updated>2019-12-03T00:00:00+05:30</updated><entry><title>Monitoring GlusterFS - Yet another try</title><link href="https://aravindavk.in/blog/monitoring-glusterfs-yet-another-try/" rel="alternate"></link><published>2019-12-03T00:00:00+05:30</published><updated>2019-12-03T00:00:00+05:30</updated><author><name>Aravinda VK</name></author><id>tag:aravindavk.in,2019-12-03:/blog/monitoring-glusterfs-yet-another-try/</id><summary type="html">&lt;p&gt;Introduce Metrics SDK - Collection of libraries that helps to collect metrics without knowing about Gluster internals&lt;/p&gt;</summary><content type="html">&lt;p&gt;Monitoring is one of my favorite topics, and previously I tried
multiple ways to monitor GlusterFS effectively. Initially, I decided
to avoid running Gluster CLI commands with too frequent intervals by
using Gluster hooks(Blog about using Gluster hooks is
&lt;a href="https://aravindavk.in/blog/effective-glusterfs-monitoring-using-hooks/"&gt;here&lt;/a&gt;). But
this approach was not practical since hooks are not available for all
events.&lt;/p&gt;
&lt;p&gt;Then I started a project called
"&lt;a href="https://aravindavk.in/blog/introducing-gdash/"&gt;gdash&lt;/a&gt;" to visualize
the health of the cluster using gluster command-line tools. But this
was having only limited access to the cluster status and depended
solely on what gluster CLI provides.&lt;/p&gt;
&lt;p&gt;Events APIs are introduced in Gluster to fill the gaps of limited
hooks support. The events listener needs to be started in each node of
the cluster, and it exports the local events via registered
webhooks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aravindavk.in/blog/10-mins-intro-to-gluster-eventing/"&gt;10 minutes introduction to Gluster Eventing Feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aravindavk.in/blog/effective-gluster-monitoring-eventsapis/"&gt;Effective Gluster Monitoring using Events APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aravindavk.in/blog/gluster-georep-dashboard-experiment/"&gt;Gluster Geo-replication Dashboard Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Events APIs are great since it helps to reduce polling Gluster
cluster. But Events APIs are not perfect because of the asynchronous
nature it can miss events. If a Webhook listener is down, then there
is no way to get the history of events.&lt;/p&gt;
&lt;p&gt;Events APIs are useful for creating health/status boards but not so
helpful while designing monitoring systems that require historical
data to make decisions and plot graphs. For example, adding an event
for each file create/delete is not practical, so events APIs are not
useful for getting Volume utilization details and similar metrics.&lt;/p&gt;
&lt;p&gt;Many approaches we tried didn't succeed because all are dependent on
gluster command-line tools. When we depend on Gluster CLIs, then
collecting metrics from every node doesn't make sense because Gluster
CLIs returns the same data from all the nodes. So if we start
collecting from a single node of the cluster, then we need a mechanism
to choose another node when the previously active node goes down.&lt;/p&gt;
&lt;p&gt;When we started working on the Prometheus integration, our approach
was to collect metrics at the lowest level possible and use the
monitoring system's capability to aggregate the metrics from multiple
nodes. For example, instead of collecting Volume utilization via mount
or Gluster volume status command, Prometheus exporter collected
utilization metrics from the bricks. This approach avoided all the
complexities related to leader election or duplicate metrics.&lt;/p&gt;
&lt;p&gt;The gluster-prometheus project solved problems related to some of the
metrics, but not for all. We are still dependent on Gluster CLI
commands for some of the metrics like Profile and others.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gluster/gluster-prometheus"&gt;Gluster Prometheus project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aravindavk.in/blog/monitoring-glusterfs-volume-utilization/"&gt;Monitoring GlusterFS - Volume Utilization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aravindavk.in/blog/gluster-volume-utilization-multiple-approaches/"&gt;Gluster Volume utilization - Multiple approaches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aravindavk.in/blog/elixir-phoenix-liveview-gluster-dashboard/"&gt;Elixir Phoenix Liveview and Gluster dashboard&lt;/a&gt; - Dashboard experiment for Gluster but not using Prometheus.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What's wrong with using Gluster CLI commands for metrics collection?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gluster CLI command fails some times due to locks(When gluster
  command-line tools used in parallel)&lt;/li&gt;
&lt;li&gt;Gluster CLIs will not help to collect only local metrics&lt;/li&gt;
&lt;li&gt;If Gluster CLIs are not available(If collecting client metrics or
  external projects like &lt;a href="https://kadalu.io"&gt;kadalu.io&lt;/a&gt;, which doesn't use
  Glusterd!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;So what next?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Similar to the previous approach, collect metrics at as lowest level
  as possible.&lt;/li&gt;
&lt;li&gt;Do not depend on Gluster CLIs, but design an external tool to
  populate the peer, cluster, and volume info files. For example,
  while collecting a brick's utilization, how to find to which node,
  volume, or cluster it belongs? Maintain info file for each entity
  and update whenever cluster state changes. (Events APIs comes handy
  here).&lt;/li&gt;
&lt;li&gt;For collecting volume profile related metrics, understand the RPC
  between brick process and glusterd, and communicate directly to
  brick process and collect only local metrics.&lt;/li&gt;
&lt;li&gt;Integrate with the metrics available from &lt;a href="https://github.com/amarts/glustermetrics"&gt;Amar's project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Introduce Metrics SDK - Collection of libraries that helps to
  collect metrics without knowing about Gluster internals.  This SDK
  also helps us to integrate with any Monitoring tools(Prometheus,
  Netdata, Nagios, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last week &lt;a href="https://medium.com/@tumballi"&gt;Amar&lt;/a&gt; invited Gluster
developers to propose features for Gluster 8, 9, and
X(&lt;a href="https://www.gluster.org/blog-planning-ahead-for-gluster-releases/"&gt;here&lt;/a&gt;
and
&lt;a href="https://lists.gluster.org/pipermail/gluster-devel/2019-November/056709.html"&gt;here&lt;/a&gt;. I
am planning to spend some time on mentoring/designing/implementing the
Monitoring solution for Gluster.&lt;/p&gt;
&lt;p&gt;I am hoping to get some success this time. Let me know if anyone
interested to work on this.&lt;/p&gt;
&lt;p&gt;Thanks. Let me know your thoughts.&lt;/p&gt;</content><category term="blogs"></category><category term="glusterfs"></category><category term="glusterfsblog"></category></entry><entry><title>GlusterFS Geo-replication Tutorials - Understanding Session Creation</title><link href="https://aravindavk.in/blog/glusterfs-georeplication-tutorials-1/" rel="alternate"></link><published>2015-04-02T00:00:00+05:30</published><updated>2015-04-02T00:00:00+05:30</updated><author><name>Aravinda VK</name></author><id>tag:aravindavk.in,2015-04-02:/blog/glusterfs-georeplication-tutorials-1/</id><summary type="html">&lt;p class="first last"&gt;Geo-replication is one of the awesome feature of GlusterFS&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Geo-replication is one of the awesome feature of &lt;a class="reference external" href="http://gluster.org/"&gt;GlusterFS&lt;/a&gt;. With this feature we can replicate data from one Gluster Volume to another geographically located Gluster Volume.&lt;/p&gt;
&lt;p&gt;This blog is first in a series of Understanding GlusterFS Geo-replication, Comments and Suggestions welcome.&lt;/p&gt;
&lt;script async class="speakerdeck-embed" data-id="f509ae7c9216494fa690f8dfee0e91c1" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;
&lt;/script&gt;&lt;p&gt;Link: &lt;a class="reference external" href="https://speakerdeck.com/aravindavk/understanding-glusterfs-geo-replication-session-creation"&gt;https://speakerdeck.com/aravindavk/understanding-glusterfs-geo-replication-session-creation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I created these visualizations using my Wacom tablet(Wacom Bamboo Pen &amp;amp; Touch CTH-460) and &lt;a class="reference external" href="http://mypaint.intilinux.com/"&gt;MyPaint&lt;/a&gt; software in Linux.&lt;/p&gt;
</content><category term="blogs"></category><category term="geo-replication"></category><category term="glusterfs"></category><category term="visualizations"></category><category term="glusterfsblog"></category></entry><entry><title>Introducing gdash - GlusterFS Dashboard</title><link href="https://aravindavk.in/blog/introducing-gdash/" rel="alternate"></link><published>2014-12-04T00:00:00+05:30</published><updated>2014-12-04T00:00:00+05:30</updated><author><name>Aravinda VK</name></author><id>tag:aravindavk.in,2014-12-04:/blog/introducing-gdash/</id><summary type="html">&lt;p class="first last"&gt;gdash is a super-young project, which shows GlusterFS volume information about local, remote clusters.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Added &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--gluster&lt;/span&gt;&lt;/tt&gt; option to specify the path to gluster. By default it looks for &lt;tt class="docutils literal"&gt;/usr/sbin/gluster&lt;/tt&gt;, If you installed GlusterFS using source install then use &lt;code&gt;sudo gdash --gluster /usr/local/sbin/gluster&lt;/code&gt;. (Those who already installed gdash, can run &lt;code&gt;sudo pip install -U gdash&lt;/code&gt; to upgrade.)&lt;/p&gt;
&lt;p&gt;gdash is a super-young project, which shows GlusterFS volume information about local, remote clusters. This app is based on GlusterFS's capability of executing &lt;code&gt;gluster volume info&lt;/code&gt; and &lt;code&gt;gluster volume status&lt;/code&gt; commands for a remote server using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--remote-host&lt;/span&gt;&lt;/tt&gt; option.&lt;/p&gt;
&lt;p&gt;If you can run &lt;code&gt;gluster volume info --remote-host=&amp;lt;HOST_NAME&amp;gt;&lt;/code&gt;, then you can monitor that cluster using gdash. Make sure you allow to access glusterd port(24007) for the machine where you will run gdash.&lt;/p&gt;
&lt;p&gt;To install,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install gdash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo easy_install gdash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gdash is created using Python &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; and &lt;a class="reference external" href="http://emberjs.com/"&gt;ember&lt;/a&gt; (I used &lt;a class="reference external" href="http://ember-cli.com"&gt;ember-cli&lt;/a&gt;).&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="gdash home screen" src="/images/gdash-home.png" /&gt;
&lt;p class="caption"&gt;gdash home screen&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="gdash detail screen" src="/images/gdash-detail.png" /&gt;
&lt;p class="caption"&gt;gdash Volume details page&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;div class="section" id="use-case-1-local-volumes"&gt;
&lt;h3&gt;Use case 1 - Local Volumes&lt;/h3&gt;
&lt;p&gt;Just run &lt;code&gt;sudo gdash&lt;/code&gt;, gdash starts running in port 8080. visit &lt;a class="reference external" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; to view GlusterFS volumes of local machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-2-remote-volumes"&gt;
&lt;h3&gt;Use case 2 - Remote Volumes&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;sudo gdash --host 192.168.1.6&lt;/code&gt;, visit &lt;a class="reference external" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; to view GlusterFS volume information of remote host. Dashboard shows all the volumes which are part of that remote host.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-3-multiple-clusters"&gt;
&lt;h3&gt;Use case 3 - Multiple clusters&lt;/h3&gt;
&lt;p&gt;Create a clusters.conf file as example shown below, specify at least one host from each cluster.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[clusters]&lt;/span&gt;
&lt;span class="na"&gt;cluster1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;host1, host2, host3&lt;/span&gt;
&lt;span class="na"&gt;cluster2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;host4, host5, host6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code&gt;gdash&lt;/code&gt; using,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo gdash --clusters ~/clusters.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-4-multiple-teams"&gt;
&lt;h3&gt;Use case 4 - Multiple teams&lt;/h3&gt;
&lt;p&gt;If two teams monitoring two clusters and if you don't want to share the other cluster details then, just run below commands in two terminals and give respective URL to each team. Other solution is create two seperate config files and run it separately for different ports.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Team 1, who monitors cluster1 http://localhost:8001&lt;/span&gt;
sudo gdash -p &lt;span class="m"&gt;8001&lt;/span&gt; --clusters ~/clusters.conf --limit-cluster cluster1

&lt;span class="c1"&gt;# Team 2, who monitors cluster2 http://localhost:8002&lt;/span&gt;
sudo gdash -p &lt;span class="m"&gt;8002&lt;/span&gt; --clusters ~/clusters.conf --limit-cluster cluster2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="available-options"&gt;
&lt;h2&gt;Available Options&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;usage: gdash [-h] [--port PORT] [--cache CACHE] [--debug] [--host HOST]
             [--clusters CLUSTERS] [--limit-cluster LIMIT_CLUSTER]

GlusterFS dashboard
-------------------

This tool is based on remote execution support provided by
GlusterFS cli for `volume info` and `volume status` commands

optional arguments:
  -h, --help            show this help message and exit
  --port PORT, -p PORT  Port
  --cache CACHE, -c CACHE
                        Cache output in seconds
  --debug               DEBUG
  --host HOST           Remote host which is part of cluster
  --clusters CLUSTERS   Clusters CONF file
  --limit-cluster LIMIT_CLUSTER
                        Limit dashboard only for specified cluster
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Code is hosted in &lt;a class="reference external" href="https://github.com/aravindavk/gdash"&gt;github/aravindavk&lt;/a&gt;, licensed under &lt;a class="reference external" href="https://github.com/aravindavk/gdash/blob/master/LICENSE.txt"&gt;MIT&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blogs"></category><category term="glusterfs"></category><category term="tools"></category><category term="glusterfsblog"></category></entry><entry><title>gvolinfojson - A utility to convert xml output of gluster volume info to json</title><link href="https://aravindavk.in/blog/gvolinfojson/" rel="alternate"></link><published>2014-05-13T00:00:00+05:30</published><updated>2014-05-13T00:00:00+05:30</updated><author><name>Aravinda VK</name></author><id>tag:aravindavk.in,2014-05-13:/blog/gvolinfojson/</id><summary type="html">&lt;p class="first last"&gt;A utility to convert xml output of gluster volume info to json.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Today I wrote a small utility using &lt;a class="reference external" href="http://golang.org/"&gt;golang&lt;/a&gt; to convert xml output of command &lt;code&gt;gluster volume info&lt;/code&gt; to json.&lt;/p&gt;
&lt;p&gt;Download the binary from &lt;a class="reference external" href="https://github.com/aravindavk/gvolinfojson/releases/download/1.0/gvolinfojson"&gt;here&lt;/a&gt; and copy to /usr/local/bin directory(or any other directory, which is available in PATH).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://github.com/aravindavk/gvolinfojson/releases/download/1.0/gvolinfojson
sudo cp gvolinfojson /usr/local/bin/
sudo chmod +x /usr/local/bin/gvolinfojson
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;p&gt;If you have golang installed(make sure &lt;code&gt;$GOPATH/bin&lt;/code&gt; is available in PATH), then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;go get github.com/aravindavk/gvolinfojson
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use it with gluster volume info command,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo gluster volume info --xml | gvolinfojson
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it, you will get the json output of volume info command. If you need pretty json output then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo gluster volume info --xml | gvolinfojson --pretty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Source code is available &lt;a class="reference external" href="https://github.com/aravindavk/gvolinfojson"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;C &amp;amp; S Welcome.&lt;/p&gt;
</content><category term="blogs"></category><category term="glusterfs"></category><category term="tools"></category><category term="glusterfsblog"></category></entry><entry><title>Effective GlusterFs monitoring using hooks</title><link href="https://aravindavk.in/blog/effective-glusterfs-monitoring-using-hooks/" rel="alternate"></link><published>2013-11-28T00:00:00+05:30</published><updated>2013-11-28T00:00:00+05:30</updated><author><name>Aravinda VK</name></author><id>tag:aravindavk.in,2013-11-28:/blog/effective-glusterfs-monitoring-using-hooks/</id><summary type="html">&lt;p class="first last"&gt;Let us imagine we have a GlusterFs monitoring system which displays list of volumes and its state, to show the realtime status, monitoring app need to query the GlusterFs in regular interval to check volume status, new volumes etc. Assume if the polling interval is 5 seconds then monitoring app has to run &amp;quot;gluster volume info command&amp;quot; ~17000 times a day!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Let us imagine we have a GlusterFs monitoring system which displays list of volumes and its state, to show the realtime status, monitoring app need to query the GlusterFs in regular interval to check volume status, new volumes etc. Assume if the polling interval is 5 seconds then monitoring app has to run &lt;code&gt;gluster volume info&lt;/code&gt; command ~17000 times a day!&lt;/p&gt;
&lt;p&gt;How about maintaining a state file in each node? which gets updated after every new GlusterFs event(create, delete, start, stop etc).&lt;/p&gt;
&lt;p&gt;In this blog post I am trying to explain the possibility of creating state file and using it.&lt;/p&gt;
&lt;p&gt;As of today GlusterFs provides following hooks, which we can use to update our state file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;create
delete
start
stop
add-brick
remove-brick
set
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="how-to-use-hooks"&gt;
&lt;h2&gt;How to use hooks&lt;/h2&gt;
&lt;p&gt;GlusterFs hooks present in &lt;code&gt;/var/lib/glusterd/hooks/1&lt;/code&gt; directory. Following example shows sending message to all users using &lt;code&gt;wall&lt;/code&gt; command when any new GlusterFs volume is created.&lt;/p&gt;
&lt;p&gt;Create a shell script &lt;code&gt;/var/lib/glusterd/hooks/1/create/post/SNotify.bash&lt;/code&gt; and make it executable. Whenever a volume is created GlusterFs executes all the executable scripts present in respective hook directory(Glusterfs executes only the scripts which filename starting with 'S')&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;VOL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;ARGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;getopt -l &lt;span class="s2"&gt;&amp;quot;volname:&amp;quot;&lt;/span&gt;  -name &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; -- &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ARGS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        --volname&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;shift&lt;/span&gt;
            &lt;span class="nv"&gt;VOL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
            &lt;span class="p"&gt;;;&lt;/span&gt;
        *&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;shift&lt;/span&gt;
            &lt;span class="nb"&gt;break&lt;/span&gt;
            &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;esac&lt;/span&gt;
    &lt;span class="nb"&gt;shift&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

wall &lt;span class="s2"&gt;&amp;quot;Gluster Volume Created: &lt;/span&gt;&lt;span class="nv"&gt;$VOL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="experimental-project-glusterweb"&gt;
&lt;h2&gt;Experimental project - GlusterWeb&lt;/h2&gt;
&lt;p&gt;This experimental project maintains a sqlite database &lt;code&gt;/var/lib/glusterd/nodestate/glusternodestate.db&lt;/code&gt; which gets updated after any GlusterFs event. For example if a GlusterFs volume is created then it updates volumes table and also bricks table.&lt;/p&gt;
&lt;p&gt;This project depends on &lt;a class="reference external" href="https://github.com/aravindavk/glusterfs-tools"&gt;glusterfs-tools&lt;/a&gt; so install both projects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/aravindavk/glusterfs-tools.git
&lt;span class="nb"&gt;cd&lt;/span&gt; glusterfs-tools
sudo python setup.py install

git clone https://github.com/aravindavk/glusterfs-web.git
&lt;span class="nb"&gt;cd&lt;/span&gt; glusterfs-web
sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By running &lt;cite&gt;setup&lt;/cite&gt;, this tool will install all the hooks which are required for monitoring. (&lt;cite&gt;cleanup&lt;/cite&gt; is for removing all the hooks)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo glusternodestate setup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All set! now run &lt;code&gt;glusterweb&lt;/code&gt; to start webapp.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo glusterweb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Web application starts running in &lt;code&gt;http://localhost:8080&lt;/code&gt; you can change the port using &lt;code&gt;--port&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo glusterweb -p &lt;span class="m"&gt;9000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="GlusterWeb" src="/images/glusterweb-v0.1.png" /&gt;
&lt;p class="caption"&gt;Initial version of web interface.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="future-plans"&gt;
&lt;h2&gt;Future plans&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: Option to provide username and password or access key while running glusterweb, For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo glusterweb --username aravindavk --password somesecret
&lt;span class="c1"&gt;# or&lt;/span&gt;
sudo glusterweb --key secretonlyiknow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;More gluster hooks support:&lt;/strong&gt; we need more GlusterFs hooks for better monitoring(refer Problems below)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More GlusterFs features support:&lt;/strong&gt; As a experiment UI only lists volumes, we need improved UI and support for different gluster features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actions support:&lt;/strong&gt; Support for volume creation, adding/removing bricks etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REST api and SDK:&lt;/strong&gt; Providing REST api for gluster operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Many more:&lt;/strong&gt; Not yet planned :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problems"&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;State file consistency:&lt;/strong&gt; If glusterd goes down in the node then the database will have wrong details about node's state. One workaround is to reset the database if glusterd is down using a cron job, when glusterd comes up, database will not gets updated and the database will have previous updated details. To prevent this we need a glusterfs hook for &lt;cite&gt;glusterd-start&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More hooks:&lt;/strong&gt; As of today we don't have hooks for volume down/up, brick down/up and other events. We need following hooks for effective monitoring glusterfs.(Add more if anything missing in the list)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;glusterd-start
peer probe
peer detach
volume-down
volume-up
brick-up
brick-down
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let me know your thoughts! Thanks.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blogs"></category><category term="glusterfs"></category><category term="glusterfsblog"></category></entry><entry><title>glusterdf - df for gluster volumes</title><link href="https://aravindavk.in/blog/glusterdf-df-for-gluster-volumes/" rel="alternate"></link><published>2013-09-24T00:00:00+05:30</published><updated>2013-09-24T00:00:00+05:30</updated><author><name>Aravinda VK</name></author><id>tag:aravindavk.in,2013-09-24:/blog/glusterdf-df-for-gluster-volumes/</id><summary type="html">&lt;p class="first last"&gt;A CLI utility to check the disk usage of glusterfs volumes&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A CLI utility to check the disk usage of &lt;a class="reference external" href="http://gluster.org/"&gt;glusterfs&lt;/a&gt; volumes. Using &lt;code&gt;df&lt;/code&gt; command we can view the disk usage of only mounted glusterfs volumes. This utility takes care of mounting gluster volumes available in the machine where this command is executed. glusterdf uses &lt;a class="reference external" href="https://github.com/gluster/glusterfs/tree/master/api"&gt;libgfapi&lt;/a&gt; provided by glusterfs to fetch the statvfs information.&lt;/p&gt;
&lt;p&gt;Installation is very simple,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/aravindavk/glusterfs-tools.git
&lt;span class="nb"&gt;cd&lt;/span&gt; glusterfs-tools
sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also clone this project from &lt;a class="reference external" href="https://forge.gluster.org/glusterfs-tools"&gt;forge.gluster.org/glusterfs-tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once installed, two tools will be available &lt;code&gt;glustervolumes&lt;/code&gt; and &lt;cite&gt;glusterdf&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo glusterdf --help&lt;/code&gt; to know more about options available. (same for glustervolumes &lt;cite&gt;sudo glustervolumes --help&lt;/cite&gt;)&lt;/p&gt;
&lt;p&gt;Usage examples:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="glusterdf -h" src="/images/glusterfs/glusterdf_h.png" /&gt;
&lt;p class="caption"&gt;sudo glusterdf -h (Disk usage in human readable format)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="glusterdf -i" src="/images/glusterfs/glusterdf_i.png" /&gt;
&lt;p class="caption"&gt;sudo glusterdf -i (View inodes usage information)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="sudo glusterdf --status up --type repl -h" src="/images/glusterfs/glusterdf_status_type_h.png" /&gt;
&lt;p class="caption"&gt;sudo glusterdf --status up --type repl -h (View all running replicated volumes)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="sudo glusterdf -h --volumewithbrick &amp;quot;/b[12]&amp;quot;" src="/images/glusterfs/glusterdf_volumewithbrick.png" /&gt;
&lt;p class="caption"&gt;sudo glusterdf -h --volumewithbrick &amp;quot;/b[12]&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="sudo glusterdf --status up --type repli -h --json | python -m json.tool" src="/images/glusterfs/glusterdf_json.png" /&gt;
&lt;p class="caption"&gt;sudo glusterdf --status up --type repli -h --json | python -m json.tool&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="glusterdf --help" src="/images/glusterfs/glusterdf-help.png" /&gt;
&lt;p class="caption"&gt;sudo glusterdf --help&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In my previous blog(&lt;a class="reference external" href="http://aravindavk.in/blog/glusterfs-tools/"&gt;this&lt;/a&gt;) I wrote about gfvolumes(now it is &lt;cite&gt;glustervolumes&lt;/cite&gt;). glusterfs-tools is rewritten as python library which can be used with your Python programs.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;glusterfstools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gfapi&lt;/span&gt;
&lt;span class="c1"&gt;# Get all volumes&lt;/span&gt;
&lt;span class="n"&gt;vols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Get a specific volume information&lt;/span&gt;
&lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gv1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Search volumes by status&lt;/span&gt;
&lt;span class="n"&gt;down_volumes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;down&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;# Search volumes by type&lt;/span&gt;
&lt;span class="n"&gt;distribute_volumes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;distribute&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;# Statvfs information&lt;/span&gt;
&lt;span class="n"&gt;vol_statvfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gfapi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;statvfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gv1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# To view information about gluster volumes which are down&lt;/span&gt;
&lt;span class="c1"&gt;# and having bricks like &amp;quot;/gfs&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;vols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;down&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;volumewithbricks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/gfs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;# To view filters available&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;volumes.search accepts filters as parameter, extending volume filters is very simple. For example name filter looks like this(&lt;a class="reference external" href="https://github.com/aravindavk/glusterfs-tools/blob/master/src/glusterfstools/volumefilters.py"&gt;src/glusterfstools/volumefilters.py&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
            &lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
            &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vols&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The filter can be used as below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;glusterfstools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;

&lt;span class="c1"&gt;# Filters the volumes with name either gv1 or gv2&lt;/span&gt;
&lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gv[12]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blogs"></category><category term="glusterfs"></category><category term="tools"></category><category term="glusterfsblog"></category></entry><entry><title>GlusterFS Tools</title><link href="https://aravindavk.in/blog/glusterfs-tools/" rel="alternate"></link><published>2013-06-18T00:00:00+05:30</published><updated>2013-06-18T00:00:00+05:30</updated><author><name>Aravinda VK</name></author><id>tag:aravindavk.in,2013-06-18:/blog/glusterfs-tools/</id><summary type="html">&lt;p class="first last"&gt;A wrapper around GlusterFS CLI tool&lt;/p&gt;
</summary><content type="html">&lt;div class="notice-update"&gt;
UPDATE: &lt;br/&gt;Installation and usage is simplified with the new release of glusterfs-tools, refer &lt;a href="http://aravindavk.in/blog/glusterdf-df-for-gluster-volumes/"&gt;this blog&lt;/a&gt; for more details.
&lt;/div&gt;&lt;p&gt;From &lt;a class="reference external" href="http://gluster.org"&gt;GlusterFS website&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
GlusterFS is an open source, distributed file system capable of scaling to several petabytes (actually, 72 brontobytes!) and handling thousands of clients. GlusterFS clusters together storage building blocks over Infiniband RDMA or TCP/IP interconnect, aggregating disk and memory resources and managing data in a single global namespace. GlusterFS is based on a stackable user space design and can deliver exceptional performance for diverse workloads.&lt;/blockquote&gt;
&lt;p&gt;Gluster CLI has limited features to view and filter the volume info. I started a small project to enhance Gluster CLI for personal use. As of now it consists of a tool to list Gluster volumes in tabular format. Other intersesting features includes filtering the output based on name, type, status, bricks etc.&lt;/p&gt;
&lt;p&gt;Clone the project(I cloned it to &lt;code&gt;/home/aravinda/sandbox/&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/aravinda/sandbox
git clone https://github.com/aravindavk/glusterfs-tools.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a shellscript to call gftools /usr/local/bin/gfvolumes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
python /home/aravinda/sandbox/glusterfs-tools/gftools/volumes.py &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make gfvolumes executable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x /usr/local/bin/gfvolumes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can run &lt;code&gt;sudo gfvolumes&lt;/code&gt; to see the list of glusterfs volumes. Type &lt;code&gt;gfvolumes --help&lt;/code&gt; for help.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="All Volumes" src="/images/glusterfs/all_volumes.png" /&gt;
&lt;p class="caption"&gt;All Volumes&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="Name Filter" src="/images/glusterfs/name_filter.png" /&gt;
&lt;p class="caption"&gt;Name Filter&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="Status Filter" src="/images/glusterfs/status_filter.png" /&gt;
&lt;p class="caption"&gt;Status Filter&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="Type Filter" src="/images/glusterfs/type_filter.png" /&gt;
&lt;p class="caption"&gt;Type Filter&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="Name Filter" src="/images/glusterfs/show_bricks.png" /&gt;
&lt;p class="caption"&gt;Show Bricks&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Additionally it can output filtered details in JSON format.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Name Filter" src="/images/glusterfs/json_format.png" /&gt;
&lt;p class="caption"&gt;JSON Format&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can easily import this in our python script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gftools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;
&lt;span class="n"&gt;gfvols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GfVolumes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gfvols&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^gv[0-9]$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Various filters available&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Do action&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; root permission is required to run gluster command, so run gfvolumes as root(&lt;code&gt;sudo gfvolumes&lt;/code&gt;)&lt;/p&gt;
&lt;div class="section" id="future-plans"&gt;
&lt;h2&gt;Future plans:&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adding more filters&lt;/li&gt;
&lt;li&gt;Adding more admin tools&lt;/li&gt;
&lt;li&gt;Creating RPM/DEB packages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C &amp;amp; S Welcome.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blogs"></category><category term="glusterfs"></category><category term="tools"></category><category term="glusterfsblog"></category></entry></feed>